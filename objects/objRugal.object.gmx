<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRugal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>death_explosion = objNormalExplosion;
healthpoints = 1;
image_speed = 0;
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI &amp; Drawing Sprites

//AI

// Move towards the player
if (x &lt; objCameraHR.x) &amp;&amp; (instance_exists(objVicViper)) 
{
    move_towards_point(objVicViper.x,objVicViper.y,1.4);
}

// If player is dead
if (x &lt; objCameraHR.x) &amp;&amp; (!instance_exists(objVicViper)) 
{
    speed = 1;
}

if (!speed = 0) &amp;&amp; (x &gt; objCameraHR.x) instance_destroy(); 
if (!speed = 0) &amp;&amp; (x &lt; objCameraHL.x) instance_destroy(); 

//Drawing Sprites
if (!speed = 0) &amp;&amp; (instance_exists(objVicViper)) //Face the player
{
    switch round(point_direction(x,y,objVicViper.x,objVicViper.y)/45)
    {
    case 0: // Right
        image_index = 0;
        image_xscale = -1;
        image_yscale = 1;
        break;
    case 1: // Up Right
        image_index = 2;
        image_xscale = -1;
        image_yscale = 1;
        break;
    case 2: // Up
        image_index = 4;
        image_xscale = 1;
        image_yscale = 1;
        break;
    case 3: // Up Left
        image_index = 2;
        image_xscale = 1;
        image_yscale = 1;
        break;
    case 4: // Left
        image_index = 0;
        image_xscale = 1;
        image_yscale = 1;
        break;
    case 5: // Down Left
        image_index = 2;
        image_xscale = 1;
        image_yscale = -1;
        break;
    case 6: // Down
        image_index = 4;
        image_xscale = 1;
        image_yscale = -1;
        break;
    case 7: // Down Right
        image_index = 2;
        image_xscale = -1;
        image_yscale = -1;
        break;
    case 8: // Right
        image_index = 0;
        image_xscale = -1;
        image_yscale = 1;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
